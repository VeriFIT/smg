apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
}

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  compile group: 'com.google.guava', name: 'guava', version: '12.0'
  testCompile "org.mockito:mockito-core:1.10.19"
  testCompile 'junit:junit:4.12'
  compile 'com.google.code.findbugs:annotations:3.0.0'
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

checkstyle {
  ignoreFailures = false
}

def checkstyleMainWarningsFile = 'build/reports/checkstyle/main.xml'
def checkstyleTestWarningsFile = 'build/reports/checkstyle/test.xml'

task verifyNoCheckstyleWarningsMain(type: GradleBuild) {
    doLast {
        File warningsFile = file(checkstyleMainWarningsFile)
        if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
           throw new GradleException("There were checkstyle warnings! For more info check $warningsFile")
        }
    }
}

task verifyNoCheckstyleWarningsTest(type: GradleBuild) {
    doLast {
        File warningsFile = file(checkstyleTestWarningsFile)
        if (warningsFile.exists() && warningsFile.text.contains("<error ")) {
            throw new GradleException("There were checkstyle warnings! For more info check $warningsFile")
        }
    }
}

checkstyleMain.finalizedBy verifyNoCheckstyleWarningsMain
checkstyleTest.finalizedBy verifyNoCheckstyleWarningsTest

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

group = "cz.afri"
archivesBaseName = "smg"
version = "1.0"

def ossrhUser = hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('ossrhUsername')
def ossrhPass = hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('ossrhPassword')

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUser, password: ossrhPass)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUser, password: ossrhPass)
      }

      pom.project {
        name 'SMG'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'SMG is a Java library implementing the abstract domain of symbolic memory graphs. The library is supposed to be used by static analyzers for C programs, especially those that need to deal with pointer-rich programs and those working with unbounded dynamic data structures.'
        url 'https://github.com/petr-muller/smg'

        scm {
          connection 'scm:git:https://github.com/petr-muller/smg'
          developerConnection 'scm:git:https://github.com/petr-muller/smg'
          url 'https://github.com/petr-muller/smg'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'muller'
            name 'Petr Muller'
            email 'muller@redhat.com'
          }
        }
      }
    }
  }
}
